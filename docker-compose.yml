services:
  assets:
    build:
      context: .
      dockerfile: Dockerfile.assets
    container_name: assets
    volumes:
      - shared_data:/shared
      - ./assets:/shared/assets  # Mapeando o diretório de pôsteres do container para o local
      - ./data:/data  # Mapeando os novos arquivos TSV para o contêiner
    networks:
      - app_network

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=ImdbSecure2025
    volumes:
      - mongodb_data:/data/db
    networks:
      - app_network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=ImdbSecure2025
      - ME_CONFIG_MONGODB_URL=mongodb://root:ImdbSecure2025@mongodb:27017/
      - ME_CONFIG_BASICAUTH=false
    networks:
      - app_network

  cassandra:
    image: cassandra
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_USER=cassandra
      - CASSANDRA_PASSWORD=cassandra
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - app_network

  neo4j:
    image: neo4j
    container_name: neo4j
    environment:
      - NEO4J_AUTH=neo4j/SecureNeo4j2025
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    networks:
      - app_network

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network

networks:
  app_network:

volumes:
  shared_data:
  mongodb_data:
  cassandra_data:
  neo4j_data:
  redis_data:
